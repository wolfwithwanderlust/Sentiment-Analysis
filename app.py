import streamlit as st
import requests
import pandas as pd
from io import StringIO
import nltk

# T√©l√©chargement des ressources NLTK
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

# URL de l'API FastAPI
api_url = "http://127.0.0.1:8000"  # Assurez-vous que c'est l'URL correcte

# Configuration de la page Streamlit
st.set_page_config(page_title="‚ú® Pr√©diction de Sentiment ‚ú®", layout="wide")

# Initialiser la variable session_state pour suivre l'onglet actif
if 'active_tab' not in st.session_state:
    st.session_state['active_tab'] = 'Fichier CSV/TSV'

# Initialiser l'historique des pr√©dictions pour les textes manuels dans session_state
if 'manual_text_history' not in st.session_state:
    st.session_state['manual_text_history'] = []

# Fonction pour changer l'onglet actif
def switch_tab(tab_name):
    st.session_state['active_tab'] = tab_name



# Cr√©er des onglets pour les diff√©rentes options (fichier ou texte)
tab1, tab2, tab3 = st.tabs(["Fichier CSV/TSV", "Commentaire texte", "Historique"])

# Onglet pour l'upload de fichier
with tab1:
    st.header("üì© Uploader un fichier TSV")
    file = st.file_uploader("Choisir un fichier TSV", type=["tsv"])

    if file is not None:
        # Lecture du fichier upload√©
        df = pd.read_csv(file, sep='\t')
        st.write("Aper√ßu du fichier avant nettoyage :")
        st.dataframe(df)

        # Bouton pour effectuer le nettoyage via l'API
        if st.button("Nettoyer et analyser les sentiments", on_click=switch_tab, args=('Fichier CSV/TSV',)):
            # Envoi du fichier √† l'API pour nettoyage et pr√©diction
            response = requests.post(f"{api_url}/predict-sentiment/", files={"file": file.getvalue()})

            if response.status_code == 200:
                # Lire la r√©ponse de l'API et afficher le fichier modifi√©
                updated_tsv = StringIO(response.text)
                df_updated = pd.read_csv(updated_tsv, sep='\t')
                st.write("Fichier nettoy√© et pr√©dictions ajout√©es :")
                st.dataframe(df_updated)

                st.write(f"Taille du fichier apr√®s nettoyage et pr√©dictions : {df_updated.shape}")

                # Bouton pour t√©l√©charger le fichier modifi√©
                st.download_button(
                    label="T√©l√©charger le fichier modifi√©",
                    data=response.text,
                    file_name="fichier_avec_sentiment.tsv",
                    mime="text/tsv"
                )
            else:
                st.error(f"Erreur lors de l'analyse des sentiments: {response.text}")



# Onglet pour entrer un commentaire texte
with tab2:
    st.header("‚å®Ô∏è Entrer un commentaire en anglais")

    # Champ texte pour le commentaire
    text = st.text_area("Entrez un commentaire (min. 50 caract√®res)", max_chars=500)

    if st.button("Pr√©dire √† partir du texte", on_click=switch_tab, args=('Commentaire texte',)):
        if len(text) < 50:
            st.warning("Le commentaire doit contenir au moins 50 caract√®res.")
        else:
            # Requ√™te √† l'API pour pr√©dire le sentiment √† partir du texte
            response = requests.post(f"{api_url}/predict-text/", json={"text": text})
            if response.status_code == 200:
                prediction = response.json()

                # V√©rifiez si la r√©ponse est une liste (nettoy√©e)
                if isinstance(prediction, list):
                    # Afficher la phrase nettoy√©e et sa pr√©diction
                    st.write(f"Pr√©diction : {prediction[0]['sentiment_prediction']}")
                    st.dataframe(pd.DataFrame(prediction))  # Affichage du DataFrame nettoy√©

                    # Ajouter √† l'historique des textes manuels
                    st.session_state['manual_text_history'].append(prediction[0])  # Enregistrer la phrase nettoy√©e et pr√©diction
                else:
                    st.error(f"Erreur lors de la pr√©diction : {prediction['error']}")
            else:
                st.error(f"Erreur lors de la pr√©diction: {response.text}")



# Onglet pour afficher l'historique des pr√©dictions de textes manuels
with tab3:
    st.header("Historique des pr√©dictions (textes manuels uniquement)")

    if st.session_state['manual_text_history']:
        # Cr√©er un DataFrame de l'historique des textes manuels
        df_history = pd.DataFrame(st.session_state['manual_text_history'])

        # Afficher le DataFrame
        st.dataframe(df_history)

        # Bouton pour t√©l√©charger l'historique sous forme de CSV
        csv = df_history.to_csv(index=False)
        st.download_button(
            label="T√©l√©charger l'historique en CSV",
            data=csv,
            file_name="historique_predictions_textes_manuels.csv",
            mime="text/csv"
        )
    else:
        st.write("Aucune pr√©diction enregistr√©e pour le moment.")
